buildscript {
    repositories {
        maven { url 'https://files.minecraftforge.net/maven' }
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
plugins {
    id "com.github.hierynomus.license" version "0.15.0"
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${mod_version}"
def env = System.getenv()
if (env.BUILD_NUMBER) {
    version = version + "+" + "${env.BUILD_NUMBER}"
}
group = 'de.melanx.aiotbotania'
archivesBaseName = "aiotbotania-${minecraft_version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: '20200226-1.15.1'

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            mods {
                aiotbotania {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run_server')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            mods {
                aiotbotania {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run_data')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'aiotbotania', '--all', '--output', "\"" + file('src/generated/resources/') + "\"", '--existing', "\"" + file('src/main/resources/') + "\""

            mods {
                aiotbotania {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        name = "botania"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "curios"
        url = "https://maven.theillusivec4.top/"
    }
}

license {
    header rootProject.file('HEADER')
    include "**/*.java"
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.name = 'MelanX'
    ext.project = "AIOT Botania"
    ignoreFailures = true
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "aiotbotania",
                "Specification-Vendor"    : "aiotbotania",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "aiotbotania",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier 'deobf'
}

artifacts {
    archives jar
    archives sourcesJar
    archives deobfJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.version
            artifact jar
            artifact sourcesJar
            artifact deobfJar
        }
    }
}

publishing {
    repositories {
        maven {
            url "/var/www/maven"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compile fg.deobf("vazkii.botania:Botania:${botania_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios:FORGE-${minecraft_version}-${curios_version}")
    compile fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}") { transitive = false }
}
